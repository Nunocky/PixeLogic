#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
require './PixeLogic.rb'


if __FILE__ == $0
  logic = PixeLogic.new({ :width  => 20,
                          :height => 20,
                          :hint_h => [
                            [0],
                            [0],
                            [9],
                            [10],
                            [10],

                            [1,1,2,1,1,3],
                            [2,2,2,4],
                            [1,5,1,4],
                            [1,5,1,4],
                            [1,2,3,1,4],

                            [2,3,1,1,4],
                            [1,4,1,1],
                            [2,7,2],
                            [1,1,2,9,2,1,1,2],
                            [2,1,2,9,2,1,3],

                            [2,1,2,9,2,1,1,2],
                            [2,1,5,2,6,1,3],
                            [2,1,5,2,6,1,1,3],
                            [2,1,1,3,1,3,1,3,1,1,3],
                            [2,1,1,3,1,1,1,1,1,3,1,1,3],
                            ],

                          :hint_v => [
                            [6],
                            [8],
                            [2,5,2],
                            [5,2],
                            [5,1,1],

                            [3,2,1,1],
                            [3,4,3,2,1,1],
                            [3,1,1,3,1,1,3,2,2],
                            [3,1,1,4,1,1,3,2,1,1],
                            [3,2,2,1,1,1,1,3,2,1,1],

                            [3,2,2,1,1,1,1,3,2,1,1],
                            [3,1,1,2,2,1,1,3,2,2],
                            [3,1,1,4,2,3,2,1,1],
                            [9,1,3,2,1,1],
                            [9,5,1,1],

                            [8,5,2],
                            [5,5,2],
                            [7],
                            [1,1,1,1,1,1,2],
                            [2,1,1,1,1,1,2],
                          ]
                        })

  def logic.show_step
    puts @loop_count
    show
  end

  def logic.show
    @height.times do |y|
      @width.times do |x|
        if @field[Point.new(x,y)] == 0
          print "✕"
        elsif @field[Point.new(x,y)] == 1
          print "■"
        else
          print "  "
        end
      end
      print "\n"
    end
  end

  logic.solve
  puts ""
  logic.show
end
